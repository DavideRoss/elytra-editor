{"version":3,"sources":["app.coffee","directives/three.coffee"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"/source/","sourcesContent":["App = angular.module 'App', ['ngRoute', 'ngResource']\n\nApp.run ['$rootScope', '$http',\n    ($rootScope, $http) ->\n\n        httpPromise = $http.get 'jsons/bookshelf_rel.json'\n\n        httpPromise.then (res) ->\n            setTimeout () ->\n                $rootScope.model = res.data\n                $rootScope.$apply()\n            , 100\n]\n","App.directive 'three', () ->\n    element =\n        restrict: 'E'\n        replace: true\n        template: '<div id=\"three-render\"></div>'\n        scope:\n            model: '='\n\n        link: ($scope, e) ->\n\n            scene = null\n\n            textureLoader = null\n            textures = {}\n\n            e.ready () ->\n                renderer = new THREE.WebGLRenderer\n                    antialias: true\n\n                scene = new THREE.Scene()\n\n                textureLoader = new THREE.TextureLoader()\n\n                # ===== Light =====================================================================\n\n                light = new THREE.AmbientLight 0xffffff\n                scene.add light\n\n                helper = new THREE.GridHelper 32, 32, 0x0000ff, 0xaaaaaa\n                scene.add helper\n\n                scene.add new THREE.AxisHelper 20\n\n                # ===== Camera ====================================================================\n\n                camera = new THREE.PerspectiveCamera 70, e[0].clientWidth / e[0].clientHeight, .1, 10000\n\n                scene.add camera\n                camera.position.z = 30\n                camera.position.y = 15\n\n                camera.lookAt new THREE.Vector3 8, 8, 8\n                controls = new THREE.OrbitControls camera\n                controls.target = new THREE.Vector3 8, 8, 8\n\n                controls.minDistance = 10\n                controls.maxDistance = 1000\n                controls.zoomSpeed = .5\n\n                e[0].addEventListener 'wheel', () ->\n                    controls.update()\n\n                # ===== Init ======================================================================\n\n                renderer.setClearColor 0xffffff\n                renderer.setSize e[0].clientWidth, e[0].clientHeight\n\n                $scope.loaded = true\n\n                e[0].appendChild renderer.domElement\n\n                radius = 300\n\n                animate = () ->\n                    requestAnimationFrame animate\n                    renderer.render scene, camera\n                animate()\n\n            $scope.$watch 'model', () ->\n                return if !$scope.model || !$scope.loaded\n\n                $scope.model.elements = [\n                    $scope.model.elements[80],\n                    $scope.model.elements[81],\n                    $scope.model.elements[88],\n                ]\n\n                # $scope.model.elements = $scope.model.elements.slice 0, 10\n\n                async.eachOf $scope.model.textures, (v, k, cb) ->\n                    textures[k] = new Image()\n                    textures[k].onload = () ->\n                        cb()\n\n                    textures[k].src = 'images/' + v + '.png'\n                , () ->\n                    $scope.renderModel()\n\n            $scope.renderModel = () ->\n                facesNames = ['west', 'east', 'up', 'down', 'south', 'north']\n\n                $scope.model.elements.forEach (e) ->\n                    size = [\n                        e.to[0] - e.from[0],\n                        e.to[1] - e.from[1],\n                        e.to[2] - e.from[2]\n                    ]\n\n                    materials = _.map facesNames, (k) ->\n                        face = e.faces[k]\n\n                        if !face\n                            if k == 'west'\n                                face = e.faces['east']\n                            else if k == 'east'\n                                face = e.faces['west']\n                            else if k == 'up'\n                                face = e.faces['down']\n                            else if k == 'down'\n                                face = e.faces['up']\n                            else if k == 'south'\n                                face = e.faces['north']\n                            else if k == 'north'\n                                face = e.faces['south']\n\n                        canvas = document.createElement 'canvas'\n                        canvasSize = 64\n                        canvas.width = canvas.height = canvasSize\n\n                        ctx = canvas.getContext '2d'\n                        ctx.imageSmoothingEnabled = false\n\n                        rotationOffset = [0, 0]\n\n                        if face\n                            if face.rotation\n                                ctx.translate canvasSize / 2, canvasSize / 2\n                                ctx.rotate face.rotation * Math.PI / 180\n                                rotationOffset = [canvasSize / 2, canvasSize / 2]\n\n                            console.log k, face.uv[0], face.uv[1], face.uv[2] - face.uv[0], face.uv[3] - face.uv[1]\n                            console.log 'uvs', face.uv\n\n                            ctx.drawImage(\n                                textures[face.texture.replace('#', '')],\n                                face.uv[0], face.uv[1], face.uv[2] - face.uv[0], face.uv[3] - face.uv[1],\n                                -rotationOffset[0], -rotationOffset[1], canvasSize, canvasSize\n                            )\n\n                        document.getElementById('debug-div').appendChild canvas\n\n                        tex = new THREE.Texture canvas\n                        tex.needsUpdate = true\n                        tex.magFilter = THREE.NearestFilter\n\n                        material = new THREE.MeshPhongMaterial\n                            map: tex\n\n                    faceMaterial = new THREE.MultiMaterial materials\n                    console.log '========================================'\n\n                    pivot = new THREE.Object3D\n                    box = new THREE.BoxGeometry size[0], size[1], size[2]\n                    boxMesh = new THREE.Mesh box, faceMaterial\n\n                    boxMesh.position.x = (size[0] / 2) + e.from[0]\n                    boxMesh.position.y = (size[1] / 2) + e.from[1]\n                    boxMesh.position.z = (size[2] / 2) + e.from[2]\n\n                    if e.rotation\n                        if e.rotation.axis == 'x'\n                            pivot.position.y += e.rotation.origin[1]\n                            pivot.position.z += e.rotation.origin[2]\n\n                            boxMesh.position.y -= e.rotation.origin[1]\n                            boxMesh.position.z -= e.rotation.origin[2]\n\n                            pivot.rotation.x = toRadians e.rotation.angle\n\n                        if e.rotation.axis == 'y'\n                            pivot.position.x += e.rotation.origin[0]\n                            pivot.position.z += e.rotation.origin[2]\n\n                            boxMesh.position.x -= e.rotation.origin[0]\n                            boxMesh.position.z -= e.rotation.origin[2]\n\n                            pivot.rotation.y = toRadians e.rotation.angle\n\n                        if e.rotation.axis == 'z'\n                            pivot.position.x += e.rotation.origin[0]\n                            pivot.position.y += e.rotation.origin[1]\n\n                            boxMesh.position.x -= e.rotation.origin[0]\n                            boxMesh.position.y -= e.rotation.origin[1]\n\n                            pivot.rotation.z = toRadians e.rotation.angle\n\n\n                    pivot.add boxMesh\n\n                    helper = new THREE.BoxHelper pivot, 0xffffff\n\n                    scene.add helper\n                    scene.add pivot\n\n    return element\n\ntoRadians = (angle) ->\n    return angle * (Math.PI / 180)\n"]}